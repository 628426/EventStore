//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EventStore.Persistence.SqlPersistence.SqlDialects {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class CommonSqlStatements {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal CommonSqlStatements() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("EventStore.Persistence.SqlPersistence.SqlDialects.CommonSqlStatements", typeof(CommonSqlStatements).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UPDATE Commits
        ///   SET Snapshot = @Payload
        /// WHERE StreamId = @StreamId
        ///   AND StreamRevision = @StreamRevision;
        ///
        ///UPDATE Streams
        ///   SET SnapshotRevision = @StreamRevision
        /// WHERE StreamId = @StreamId
        ///   AND @StreamRevision &gt; SnapshotRevision
        ///   AND @StreamRevision &lt; HeadRevision;.
        /// </summary>
        internal static string AppendSnapshotToCommit {
            get {
                return ResourceManager.GetString("AppendSnapshotToCommit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT C.StreamId, C.CommitId, C.StreamRevision, C.CommitSequence, C.Headers, C.Payload, C.Snapshot
        ///  FROM Commits AS C
        /// INNER JOIN Commits AS M
        ///    ON C.StreamId = M.StreamId
        /// WHERE C.StreamId = @StreamId
        ///   AND C.StreamRevision BETWEEN M.StreamRevision AND @StreamRevision
        ///   AND M.StreamRevision &lt;= @StreamRevision
        ///   AND M.Snapshot IS NOT NULL
        /// ORDER BY C.CommitSequence;.
        /// </summary>
        internal static string GetCommitsFromSnapshotUntilRevision {
            get {
                return ResourceManager.GetString("GetCommitsFromSnapshotUntilRevision", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT StreamId, CommitId, StreamRevision, CommitSequence, Headers, Payload
        ///  FROM Commits
        /// WHERE StreamId = @StreamId
        ///   AND StreamRevision &gt;= @StreamRevision
        /// ORDER BY CommitSequence;.
        /// </summary>
        internal static string GetCommitsFromStartingRevision {
            get {
                return ResourceManager.GetString("GetCommitsFromStartingRevision", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT StreamId, Name, HeadRevision, SnapshotRevision
        ///  FROM Streams
        /// WHERE HeadRevision &gt;= SnapshotRevision + @Threshold
        /// ORDER BY SnapshotRevision - HeadRevision;.
        /// </summary>
        internal static string GetStreamsRequiringSnaphots {
            get {
                return ResourceManager.GetString("GetStreamsRequiringSnaphots", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT C.StreamId, C.CommitId, C.StreamRevision, C.CommitSequence, C.Headers, C.Payload
        ///  FROM Commits AS C
        /// INNER JOIN Dispatch AS D
        ///    ON C.StreamId = D.StreamId
        ///   AND C.CommitSequence = D.CommitSequence
        /// ORDER BY C.CommitStamp;.
        /// </summary>
        internal static string GetUndispatchedCommits {
            get {
                return ResourceManager.GetString("GetUndispatchedCommits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DELETE
        ///  FROM Dispatch
        /// WHERE StreamId = @StreamId
        ///   AND CommitSequence = @CommitSequence;.
        /// </summary>
        internal static string MarkCommitAsDispatched {
            get {
                return ResourceManager.GetString("MarkCommitAsDispatched", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to INSERT
        ///  INTO Dispatch
        ///     ( StreamId, CommitSequence)
        ///SELECT @StreamId, @CommitSequence
        ////*FROM DUAL*/
        /// WHERE NOT EXISTS
        ///     ( SELECT *
        ///         FROM Dispatch
        ///        WHERE StreamId = @StreamId
        ///          AND CommitSequence = @CommitSequence );
        ///
        ///INSERT
        ///  INTO Commits
        ///     ( StreamId, CommitId, StreamRevision, CommitSequence, Headers, Payload )
        ///SELECT @StreamId, @CommitId, @StreamRevision, @CommitSequence, @Headers, @Payload
        ////*FROM DUAL*/
        /// WHERE NOT EXISTS
        ///     ( SELECT *
        ///         FROM Com [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PersistCommitAttempt {
            get {
                return ResourceManager.GetString("PersistCommitAttempt", resourceCulture);
            }
        }
    }
}
